/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/csm/CSMHelper.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Group,Mesh,LineSegments,BufferGeometry,LineBasicMaterial,Box3Helper,Box3,PlaneBufferGeometry,MeshBasicMaterial,BufferAttribute,DoubleSide}from"../../../build/three.module.js";class CSMHelper extends Group{constructor(e){super(),this.csm=e,this.displayFrustum=!0,this.displayPlanes=!0,this.displayShadowBounds=!0;const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),t=new Float32Array(24),i=new BufferGeometry;i.setIndex(new BufferAttribute(s,1)),i.setAttribute("position",new BufferAttribute(t,3,!1));const a=new LineSegments(i,new LineBasicMaterial);this.add(a),this.frustumLines=a,this.cascadeLines=[],this.cascadePlanes=[],this.shadowLines=[]}updateVisibility(){const e=this.displayFrustum,s=this.displayPlanes,t=this.displayShadowBounds,i=this.frustumLines,a=this.cascadeLines,o=this.cascadePlanes,r=this.shadowLines;for(let i=0,n=a.length;i<n;i++){const n=a[i],c=o[i],h=r[i];n.visible=e,c.visible=e&&s,h.visible=t}i.visible=e}update(){const e=this.csm,s=e.camera,t=e.cascades,i=e.mainFrustum,a=e.frustums,o=e.lights,r=this.frustumLines.geometry.getAttribute("position"),n=this.cascadeLines,c=this.cascadePlanes,h=this.shadowLines;for(this.position.copy(s.position),this.quaternion.copy(s.quaternion),this.scale.copy(s.scale),this.updateMatrixWorld(!0);n.length>t;)this.remove(n.pop()),this.remove(c.pop()),this.remove(h.pop());for(;n.length<t;){const e=new Box3Helper(new Box3,16777215),s=new MeshBasicMaterial({transparent:!0,opacity:.1,depthWrite:!1,side:DoubleSide}),t=new Mesh(new PlaneBufferGeometry,s),i=new Group,a=new Box3Helper(new Box3,16776960);i.add(a),this.add(e),this.add(t),this.add(i),n.push(e),c.push(t),h.push(i)}for(let e=0;e<t;e++){const s=a[e],t=o[e].shadow.camera,i=s.vertices.far,r=n[e],l=c[e],p=h[e],d=p.children[0];r.box.min.copy(i[2]),r.box.max.copy(i[0]),r.box.max.z+=1e-4,l.position.addVectors(i[0],i[2]),l.position.multiplyScalar(.5),l.scale.subVectors(i[0],i[2]),l.scale.z=1e-4,this.remove(p),p.position.copy(t.position),p.quaternion.copy(t.quaternion),p.scale.copy(t.scale),p.updateMatrixWorld(!0),this.attach(p),d.box.min.set(t.bottom,t.left,-t.far),d.box.max.set(t.top,t.right,-t.near)}const l=i.vertices.near,p=i.vertices.far;r.setXYZ(0,p[0].x,p[0].y,p[0].z),r.setXYZ(1,p[3].x,p[3].y,p[3].z),r.setXYZ(2,p[2].x,p[2].y,p[2].z),r.setXYZ(3,p[1].x,p[1].y,p[1].z),r.setXYZ(4,l[0].x,l[0].y,l[0].z),r.setXYZ(5,l[3].x,l[3].y,l[3].z),r.setXYZ(6,l[2].x,l[2].y,l[2].z),r.setXYZ(7,l[1].x,l[1].y,l[1].z),r.needsUpdate=!0}}export{CSMHelper};
//# sourceMappingURL=/sm/4a141769739f95f80e820e1c80eb72bdee0a1c557d00c2ad36c61a1cadc443b0.map