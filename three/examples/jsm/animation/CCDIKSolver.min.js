/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/animation/CCDIKSolver.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{BufferAttribute,BufferGeometry,Color,Line,LineBasicMaterial,Matrix4,Mesh,MeshBasicMaterial,Object3D,Quaternion,SphereBufferGeometry,Vector3}from"../../../build/three.module.js";var CCDIKSolver=function(){function e(e,t){this.mesh=e,this.iks=t||[],this._valid()}var t,r,i,o,n,a,s,l,h,c;function p(e,t){Object3D.call(this),this.root=e,this.iks=t||[],this.matrix.copy(e.matrixWorld),this.matrixAutoUpdate=!1,this.sphereGeometry=new SphereBufferGeometry(.25,16,8),this.targetSphereMaterial=new MeshBasicMaterial({color:new Color(16746632),depthTest:!1,depthWrite:!1,transparent:!0}),this.effectorSphereMaterial=new MeshBasicMaterial({color:new Color(8978312),depthTest:!1,depthWrite:!1,transparent:!0}),this.linkSphereMaterial=new MeshBasicMaterial({color:new Color(8947967),depthTest:!1,depthWrite:!1,transparent:!0}),this.lineMaterial=new LineBasicMaterial({color:new Color(16711680),depthTest:!1,depthWrite:!1,transparent:!0}),this._init()}return e.prototype={constructor:e,update:(t=new Quaternion,r=new Vector3,i=new Vector3,o=new Vector3,n=new Vector3,a=new Vector3,s=new Quaternion,l=new Vector3,h=new Vector3,c=new Vector3,function(){for(var e=this.mesh.skeleton.bones,p=this.iks,d=Math,f=0,u=p.length;f<u;f++){var m=p[f],v=e[m.effector],M=e[m.target];r.setFromMatrixPosition(M.matrixWorld);for(var x=m.links,w=void 0!==m.iteration?m.iteration:1,y=0;y<w;y++){for(var g=!1,b=0,k=x.length;b<k;b++){var V=e[x[b].index];if(!1===x[b].enabled)break;var W=x[b].limitation,A=x[b].rotationMin,B=x[b].rotationMax;V.matrixWorld.decompose(a,s,l),s.inverse(),o.setFromMatrixPosition(v.matrixWorld),n.subVectors(o,a),n.applyQuaternion(s),n.normalize(),i.subVectors(r,a),i.applyQuaternion(s),i.normalize();var C=i.dot(n);if(C>1?C=1:C<-1&&(C=-1),!((C=d.acos(C))<1e-5)){if(void 0!==m.minAngle&&C<m.minAngle&&(C=m.minAngle),void 0!==m.maxAngle&&C>m.maxAngle&&(C=m.maxAngle),h.crossVectors(n,i),h.normalize(),t.setFromAxisAngle(h,C),V.quaternion.multiply(t),void 0!==W){var S=V.quaternion.w;S>1&&(S=1);var D=d.sqrt(1-S*S);V.quaternion.set(W.x*D,W.y*D,W.z*D,S)}void 0!==A&&V.rotation.setFromVector3(V.rotation.toVector3(c).max(A)),void 0!==B&&V.rotation.setFromVector3(V.rotation.toVector3(c).min(B)),V.updateMatrixWorld(!0),g=!0}}if(!g)break}}return this}),createHelper:function(){return new p(this.mesh,this.mesh.geometry.userData.MMD.iks)},_valid:function(){for(var e=this.iks,t=this.mesh.skeleton.bones,r=0,i=e.length;r<i;r++){var o,n,a=e[r],s=t[a.effector],l=a.links;o=s;for(var h=0,c=l.length;h<c;h++)n=t[l[h].index],o.parent!==n&&console.warn("THREE.CCDIKSolver: bone "+o.name+" is not the child of bone "+n.name),o=n}}},p.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:p,updateMatrixWorld:function(){var e=new Matrix4,t=new Vector3;function r(e,r){return t.setFromMatrixPosition(e.matrixWorld).applyMatrix4(r)}function i(e,t,i,o){var n=r(i,o);e[3*t+0]=n.x,e[3*t+1]=n.y,e[3*t+2]=n.z}return function(t){var o=this.root;if(this.visible){var n=0,a=this.iks,s=o.skeleton.bones;e.getInverse(o.matrixWorld);for(var l=0,h=a.length;l<h;l++){var c=a[l],p=s[c.target],d=s[c.effector],f=this.children[n++],u=this.children[n++];f.position.copy(r(p,e)),u.position.copy(r(d,e));for(var m=0,v=c.links.length;m<v;m++){var M=s[c.links[m].index];this.children[n++].position.copy(r(M,e))}var x=this.children[n++],w=x.geometry.attributes.position.array;i(w,0,p,e),i(w,1,d,e);for(m=0,v=c.links.length;m<v;m++){i(w,m+2,M=s[c.links[m].index],e)}x.geometry.attributes.position.needsUpdate=!0}}this.matrix.copy(o.matrixWorld),Object3D.prototype.updateMatrixWorld.call(this,t)}}(),_init:function(){var e=this,t=this.iks;function r(t){return new Line(function(e){var t=new BufferGeometry,r=new Float32Array(3*(2+e.links.length));return t.setAttribute("position",new BufferAttribute(r,3)),t}(t),e.lineMaterial)}for(var i=0,o=t.length;i<o;i++){var n=t[i];this.add(new Mesh(e.sphereGeometry,e.targetSphereMaterial)),this.add(new Mesh(e.sphereGeometry,e.effectorSphereMaterial));for(var a=0,s=n.links.length;a<s;a++)this.add(new Mesh(e.sphereGeometry,e.linkSphereMaterial));this.add(r(n))}}}),e}();export{CCDIKSolver};
//# sourceMappingURL=/sm/e3d569aad1114548fb7375786eb41595d627aeefdb660ba1d451cadc562e0244.map