/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/misc/RollerCoaster.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{BufferAttribute,BufferGeometry,Quaternion,Raycaster,Vector3}from"../../../build/three.module.js";var RollerCoasterGeometry=function(e,t){BufferGeometry.call(this);var r=[],o=[],a=[],n=[1,1,1],p=[1,1,0],s=new Vector3(0,1,0),y=new Vector3,u=new Vector3,i=new Quaternion,c=new Quaternion;c.setFromAxisAngle(s,Math.PI/2);var h=new Vector3,l=new Vector3;l.copy(e.getPointAt(0));for(var w=[new Vector3(-.225,0,0),new Vector3(0,-.05,0),new Vector3(0,-.175,0),new Vector3(0,-.05,0),new Vector3(.225,0,0),new Vector3(0,-.175,0)],d=2*Math.PI,f=5,V=[],m=0;m<f;m++){var z=m/f*d;V.push(new Vector3(.06*Math.sin(z),.06*Math.cos(z),0))}f=6;var A=[];for(m=0;m<f;m++){z=m/f*d;A.push(new Vector3(.025*Math.sin(z),.025*Math.cos(z),0))}var x=new Vector3,Q=new Vector3;function v(e,t){Q.set(0,0,-1).applyQuaternion(i);for(var n=0;n<e.length;n++)x.copy(e[n]),x.applyQuaternion(i),x.add(h),r.push(x.x,x.y,x.z),o.push(Q.x,Q.y,Q.z),a.push(t[0],t[1],t[2]);Q.set(0,0,1).applyQuaternion(i);for(n=e.length-1;n>=0;n--)x.copy(e[n]),x.applyQuaternion(i),x.add(h),r.push(x.x,x.y,x.z),o.push(Q.x,Q.y,Q.z),a.push(t[0],t[1],t[2])}var M=new Vector3,b=new Vector3,G=new Vector3,B=new Vector3,g=new Vector3,F=new Vector3,P=new Vector3,R=new Vector3;function C(e,t,n){for(var p=0,s=e.length;p<s;p++){var y=e[p],u=e[(p+1)%s];M.copy(y).add(t),M.applyQuaternion(i),M.add(h),b.copy(u).add(t),b.applyQuaternion(i),b.add(h),G.copy(u).add(t),G.applyQuaternion(c),G.add(l),B.copy(y).add(t),B.applyQuaternion(c),B.add(l),r.push(M.x,M.y,M.z),r.push(b.x,b.y,b.z),r.push(B.x,B.y,B.z),r.push(b.x,b.y,b.z),r.push(G.x,G.y,G.z),r.push(B.x,B.y,B.z),g.copy(y),g.applyQuaternion(i),g.normalize(),F.copy(u),F.applyQuaternion(i),F.normalize(),P.copy(u),P.applyQuaternion(c),P.normalize(),R.copy(y),R.applyQuaternion(c),R.normalize(),o.push(g.x,g.y,g.z),o.push(F.x,F.y,F.z),o.push(R.x,R.y,R.z),o.push(F.x,F.y,F.z),o.push(P.x,P.y,P.z),o.push(R.x,R.y,R.z),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2])}}var I=new Vector3;for(m=1;m<=t;m++){h.copy(e.getPointAt(m/t)),s.set(0,1,0),y.subVectors(h,l).normalize(),u.crossVectors(s,y).normalize(),s.crossVectors(y,u);z=Math.atan2(y.x,y.z);i.setFromAxisAngle(s,z),m%2==0&&v(w,p),C(V,I.set(0,-.125,0),p),C(A,I.set(.2,0,0),n),C(A,I.set(-.2,0,0),n),l.copy(h),c.copy(i)}this.setAttribute("position",new BufferAttribute(new Float32Array(r),3)),this.setAttribute("normal",new BufferAttribute(new Float32Array(o),3)),this.setAttribute("color",new BufferAttribute(new Float32Array(a),3))};RollerCoasterGeometry.prototype=Object.create(BufferGeometry.prototype);var RollerCoasterLiftersGeometry=function(e,t){BufferGeometry.call(this);var r=[],o=[],a=new Quaternion,n=new Vector3(0,1,0),p=new Vector3,s=new Vector3,y=[new Vector3(0,.05,-.05),new Vector3(0,.05,.05),new Vector3(0,-.05,0)],u=[new Vector3(-.05,0,.05),new Vector3(-.05,0,-.05),new Vector3(.05,0,0)],i=[new Vector3(.05,0,-.05),new Vector3(.05,0,.05),new Vector3(-.05,0,0)],c=new Vector3,h=new Vector3,l=new Vector3,w=new Vector3,d=new Vector3,f=new Vector3,V=new Vector3,m=new Vector3;function z(e,t,n){for(var p=0,s=e.length;p<s;p++){var y=e[p],u=e[(p+1)%s];c.copy(y),c.applyQuaternion(a),c.add(t),h.copy(u),h.applyQuaternion(a),h.add(t),l.copy(u),l.applyQuaternion(a),l.add(n),w.copy(y),w.applyQuaternion(a),w.add(n),r.push(c.x,c.y,c.z),r.push(h.x,h.y,h.z),r.push(w.x,w.y,w.z),r.push(h.x,h.y,h.z),r.push(l.x,l.y,l.z),r.push(w.x,w.y,w.z),d.copy(y),d.applyQuaternion(a),d.normalize(),f.copy(u),f.applyQuaternion(a),f.normalize(),V.copy(u),V.applyQuaternion(a),V.normalize(),m.copy(y),m.applyQuaternion(a),m.normalize(),o.push(d.x,d.y,d.z),o.push(f.x,f.y,f.z),o.push(m.x,m.y,m.z),o.push(f.x,f.y,f.z),o.push(V.x,V.y,V.z),o.push(m.x,m.y,m.z)}}for(var A=new Vector3,x=new Vector3,Q=1;Q<=t;Q++){p.copy(e.getPointAt(Q/t)),s.copy(e.getTangentAt(Q/t));var v=Math.atan2(s.x,s.z);a.setFromAxisAngle(n,v),p.y>10?(A.set(-.75,-.35,0),A.applyQuaternion(a),A.add(p),x.set(.75,-.35,0),x.applyQuaternion(a),x.add(p),z(y,A,x),A.set(-.7,-.3,0),A.applyQuaternion(a),A.add(p),x.set(-.7,-p.y,0),x.applyQuaternion(a),x.add(p),z(u,A,x),A.set(.7,-.3,0),A.applyQuaternion(a),A.add(p),x.set(.7,-p.y,0),x.applyQuaternion(a),x.add(p),z(i,A,x)):(A.set(0,-.2,0),A.applyQuaternion(a),A.add(p),x.set(0,-p.y,0),x.applyQuaternion(a),x.add(p),z(i,A,x))}this.setAttribute("position",new BufferAttribute(new Float32Array(r),3)),this.setAttribute("normal",new BufferAttribute(new Float32Array(o),3))};RollerCoasterLiftersGeometry.prototype=Object.create(BufferGeometry.prototype);var RollerCoasterShadowGeometry=function(e,t){BufferGeometry.call(this);var r=[],o=new Vector3(0,1,0),a=new Vector3,n=new Quaternion,p=new Quaternion;p.setFromAxisAngle(o,Math.PI/2);var s=new Vector3,y=new Vector3;y.copy(e.getPointAt(0)),y.y=0;for(var u=new Vector3,i=new Vector3,c=new Vector3,h=new Vector3,l=1;l<=t;l++){s.copy(e.getPointAt(l/t)),s.y=0,a.subVectors(s,y);var w=Math.atan2(a.x,a.z);n.setFromAxisAngle(o,w),u.set(-.3,0,0),u.applyQuaternion(n),u.add(s),i.set(.3,0,0),i.applyQuaternion(n),i.add(s),c.set(.3,0,0),c.applyQuaternion(p),c.add(y),h.set(-.3,0,0),h.applyQuaternion(p),h.add(y),r.push(u.x,u.y,u.z),r.push(i.x,i.y,i.z),r.push(h.x,h.y,h.z),r.push(i.x,i.y,i.z),r.push(c.x,c.y,c.z),r.push(h.x,h.y,h.z),y.copy(s),p.copy(n)}this.setAttribute("position",new BufferAttribute(new Float32Array(r),3))};RollerCoasterShadowGeometry.prototype=Object.create(BufferGeometry.prototype);var SkyGeometry=function(){BufferGeometry.call(this);for(var e=[],t=0;t<100;t++){var r=800*Math.random()-400,o=50*Math.random()+50,a=800*Math.random()-400,n=40*Math.random()+20;e.push(r-n,o,a-n),e.push(r+n,o,a-n),e.push(r-n,o,a+n),e.push(r+n,o,a-n),e.push(r+n,o,a+n),e.push(r-n,o,a+n)}this.setAttribute("position",new BufferAttribute(new Float32Array(e),3))};SkyGeometry.prototype=Object.create(BufferGeometry.prototype);var TreesGeometry=function(e){BufferGeometry.call(this);var t=[],r=[],o=new Raycaster;o.ray.direction.set(0,-1,0);for(var a=0;a<2e3;a++){var n=500*Math.random()-250,p=500*Math.random()-250;o.ray.origin.set(n,50,p);var s=o.intersectObject(e);if(0!==s.length){var y=s[0].point.y,u=5*Math.random()+.5,i=Math.random()*Math.PI*2;t.push(n+Math.sin(i),y,p+Math.cos(i)),t.push(n,y+u,p),t.push(n+Math.sin(i+Math.PI),y,p+Math.cos(i+Math.PI)),i+=Math.PI/2,t.push(n+Math.sin(i),y,p+Math.cos(i)),t.push(n,y+u,p),t.push(n+Math.sin(i+Math.PI),y,p+Math.cos(i+Math.PI));for(var c=.1*Math.random(),h=0;h<6;h++)r.push(.2+c,.4+c,0)}}this.setAttribute("position",new BufferAttribute(new Float32Array(t),3)),this.setAttribute("color",new BufferAttribute(new Float32Array(r),3))};TreesGeometry.prototype=Object.create(BufferGeometry.prototype);export{RollerCoasterGeometry,RollerCoasterLiftersGeometry,RollerCoasterShadowGeometry,SkyGeometry,TreesGeometry};
//# sourceMappingURL=/sm/ee977569b20f85f517d2ad31640860d26e22e01f668842a96d37a2a71515d96f.map