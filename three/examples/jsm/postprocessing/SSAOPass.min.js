/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/postprocessing/SSAOPass.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{AddEquation,Color,CustomBlending,DataTexture,DepthTexture,DstAlphaFactor,DstColorFactor,FloatType,LinearFilter,MathUtils,MeshNormalMaterial,NearestFilter,NoBlending,RGBAFormat,RepeatWrapping,ShaderMaterial,UniformsUtils,UnsignedShortType,Vector3,WebGLRenderTarget,ZeroFactor}from"../../../build/three.module.js";import{Pass}from"../postprocessing/Pass.js";import{SimplexNoise}from"../math/SimplexNoise.js";import{SSAOShader}from"../shaders/SSAOShader.js";import{SSAOBlurShader}from"../shaders/SSAOShader.js";import{SSAODepthShader}from"../shaders/SSAOShader.js";import{CopyShader}from"../shaders/CopyShader.js";var SSAOPass=function(e,r,a,t){Pass.call(this),this.width=void 0!==a?a:512,this.height=void 0!==t?t:512,this.clear=!0,this.camera=r,this.scene=e,this.kernelRadius=8,this.kernelSize=32,this.kernel=[],this.noiseTexture=null,this.output=0,this.minDistance=.005,this.maxDistance=.1,this.generateSampleKernel(),this.generateRandomKernelRotations();var s=new DepthTexture;s.type=UnsignedShortType,s.minFilter=NearestFilter,s.maxFilter=NearestFilter,this.beautyRenderTarget=new WebGLRenderTarget(this.width,this.height,{minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat,depthTexture:s,depthBuffer:!0}),this.normalRenderTarget=new WebGLRenderTarget(this.width,this.height,{minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat}),this.ssaoRenderTarget=new WebGLRenderTarget(this.width,this.height,{minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat}),this.blurRenderTarget=this.ssaoRenderTarget.clone(),void 0===SSAOShader&&console.error("THREE.SSAOPass: The pass relies on SSAOShader."),this.ssaoMaterial=new ShaderMaterial({defines:Object.assign({},SSAOShader.defines),uniforms:UniformsUtils.clone(SSAOShader.uniforms),vertexShader:SSAOShader.vertexShader,fragmentShader:SSAOShader.fragmentShader,blending:NoBlending}),this.ssaoMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.ssaoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture,this.ssaoMaterial.uniforms.tDepth.value=this.beautyRenderTarget.depthTexture,this.ssaoMaterial.uniforms.tNoise.value=this.noiseTexture,this.ssaoMaterial.uniforms.kernel.value=this.kernel,this.ssaoMaterial.uniforms.cameraNear.value=this.camera.near,this.ssaoMaterial.uniforms.cameraFar.value=this.camera.far,this.ssaoMaterial.uniforms.resolution.value.set(this.width,this.height),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.camera.projectionMatrix),this.normalMaterial=new MeshNormalMaterial,this.normalMaterial.blending=NoBlending,this.blurMaterial=new ShaderMaterial({defines:Object.assign({},SSAOBlurShader.defines),uniforms:UniformsUtils.clone(SSAOBlurShader.uniforms),vertexShader:SSAOBlurShader.vertexShader,fragmentShader:SSAOBlurShader.fragmentShader}),this.blurMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.blurMaterial.uniforms.resolution.value.set(this.width,this.height),this.depthRenderMaterial=new ShaderMaterial({defines:Object.assign({},SSAODepthShader.defines),uniforms:UniformsUtils.clone(SSAODepthShader.uniforms),vertexShader:SSAODepthShader.vertexShader,fragmentShader:SSAODepthShader.fragmentShader,blending:NoBlending}),this.depthRenderMaterial.uniforms.tDepth.value=this.beautyRenderTarget.depthTexture,this.depthRenderMaterial.uniforms.cameraNear.value=this.camera.near,this.depthRenderMaterial.uniforms.cameraFar.value=this.camera.far,this.copyMaterial=new ShaderMaterial({uniforms:UniformsUtils.clone(CopyShader.uniforms),vertexShader:CopyShader.vertexShader,fragmentShader:CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:DstColorFactor,blendDst:ZeroFactor,blendEquation:AddEquation,blendSrcAlpha:DstAlphaFactor,blendDstAlpha:ZeroFactor,blendEquationAlpha:AddEquation}),this.fsQuad=new Pass.FullScreenQuad(null),this.originalClearColor=new Color};SSAOPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:SSAOPass,dispose:function(){this.beautyRenderTarget.dispose(),this.normalRenderTarget.dispose(),this.ssaoRenderTarget.dispose(),this.blurRenderTarget.dispose(),this.normalMaterial.dispose(),this.blurMaterial.dispose(),this.copyMaterial.dispose(),this.depthRenderMaterial.dispose(),this.fsQuad.dispose()},render:function(e,r){switch(e.setRenderTarget(this.beautyRenderTarget),e.clear(),e.render(this.scene,this.camera),this.renderOverride(e,this.normalMaterial,this.normalRenderTarget,7829503,1),this.ssaoMaterial.uniforms.kernelRadius.value=this.kernelRadius,this.ssaoMaterial.uniforms.minDistance.value=this.minDistance,this.ssaoMaterial.uniforms.maxDistance.value=this.maxDistance,this.renderPass(e,this.ssaoMaterial,this.ssaoRenderTarget),this.renderPass(e,this.blurMaterial,this.blurRenderTarget),this.output){case SSAOPass.OUTPUT.SSAO:this.copyMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.copyMaterial.blending=NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r);break;case SSAOPass.OUTPUT.Blur:this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r);break;case SSAOPass.OUTPUT.Beauty:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r);break;case SSAOPass.OUTPUT.Depth:this.renderPass(e,this.depthRenderMaterial,this.renderToScreen?null:r);break;case SSAOPass.OUTPUT.Normal:this.copyMaterial.uniforms.tDiffuse.value=this.normalRenderTarget.texture,this.copyMaterial.blending=NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r);break;case SSAOPass.OUTPUT.Default:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r),this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=CustomBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:r);break;default:console.warn("THREE.SSAOPass: Unknown output type.")}},renderPass:function(e,r,a,t,s){this.originalClearColor.copy(e.getClearColor());var i=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(a),e.autoClear=!1,null!=t&&(e.setClearColor(t),e.setClearAlpha(s||0),e.clear()),this.fsQuad.material=r,this.fsQuad.render(e),e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(i)},renderOverride:function(e,r,a,t,s){this.originalClearColor.copy(e.getClearColor());var i=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(a),e.autoClear=!1,t=r.clearColor||t,s=r.clearAlpha||s,null!=t&&(e.setClearColor(t),e.setClearAlpha(s||0),e.clear()),this.scene.overrideMaterial=r,e.render(this.scene,this.camera),this.scene.overrideMaterial=null,e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(i)},setSize:function(e,r){this.width=e,this.height=r,this.beautyRenderTarget.setSize(e,r),this.ssaoRenderTarget.setSize(e,r),this.normalRenderTarget.setSize(e,r),this.blurRenderTarget.setSize(e,r),this.ssaoMaterial.uniforms.resolution.value.set(e,r),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.camera.projectionMatrix),this.blurMaterial.uniforms.resolution.value.set(e,r)},generateSampleKernel:function(){for(var e=this.kernelSize,r=this.kernel,a=0;a<e;a++){var t=new Vector3;t.x=2*Math.random()-1,t.y=2*Math.random()-1,t.z=Math.random(),t.normalize();var s=a/e;s=MathUtils.lerp(.1,1,s*s),t.multiplyScalar(s),r.push(t)}},generateRandomKernelRotations:function(){void 0===SimplexNoise&&console.error("THREE.SSAOPass: The pass relies on SimplexNoise.");for(var e=new SimplexNoise,r=new Float32Array(64),a=0;a<16;a++){var t=4*a,s=2*Math.random()-1,i=2*Math.random()-1,n=e.noise3d(s,i,0);r[t]=n,r[t+1]=n,r[t+2]=n,r[t+3]=1}this.noiseTexture=new DataTexture(r,4,4,RGBAFormat,FloatType),this.noiseTexture.wrapS=RepeatWrapping,this.noiseTexture.wrapT=RepeatWrapping}}),SSAOPass.OUTPUT={Default:0,SSAO:1,Blur:2,Beauty:3,Depth:4,Normal:5};export{SSAOPass};
//# sourceMappingURL=/sm/c00437081b72681b1d6af8f1859f4268e7f7cc071dda27f150304be21651a500.map