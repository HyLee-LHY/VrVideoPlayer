/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/objects/Lensflare.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{AdditiveBlending,Box2,BufferGeometry,ClampToEdgeWrapping,Color,DataTexture,InterleavedBuffer,InterleavedBufferAttribute,Mesh,MeshBasicMaterial,NearestFilter,RGBFormat,RawShaderMaterial,Vector2,Vector3,Vector4}from"../../../build/three.module.js";var Lensflare=function(){Mesh.call(this,Lensflare.Geometry,new MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;var e=new Vector3,t=new Vector3,i=new DataTexture(new Uint8Array(768),16,16,RGBFormat);i.minFilter=NearestFilter,i.magFilter=NearestFilter,i.wrapS=ClampToEdgeWrapping,i.wrapT=ClampToEdgeWrapping;var r=new DataTexture(new Uint8Array(768),16,16,RGBFormat);r.minFilter=NearestFilter,r.magFilter=NearestFilter,r.wrapS=ClampToEdgeWrapping,r.wrapT=ClampToEdgeWrapping;var n=Lensflare.Geometry,o=new RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","void main() {","\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),a=new RawShaderMaterial({uniforms:{map:{value:i},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","varying vec2 vUV;","void main() {","\tgl_FragColor = texture2D( map, vUV );","}"].join("\n"),depthTest:!1,depthWrite:!1,transparent:!1}),l=new Mesh(n,o),s=[],c=LensflareElement.Shader,u=new RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:r},color:{value:new Color(16777215)},scale:{value:new Vector2},screenPosition:{value:new Vector3}},vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,blending:AdditiveBlending,transparent:!0,depthWrite:!1}),v=new Mesh(n,u);this.addElement=function(e){s.push(e)};var p=new Vector2,f=new Vector2,m=new Box2,d=new Vector4;this.onBeforeRender=function(c,y,h){c.getCurrentViewport(d);var x=d.w/d.z,g=d.z/2,w=d.w/2,b=16/d.w;if(p.set(b*x,b),m.min.set(d.x,d.y),m.max.set(d.x+(d.z-16),d.y+(d.w-16)),t.setFromMatrixPosition(this.matrixWorld),t.applyMatrix4(h.matrixWorldInverse),!(t.z>0)&&(e.copy(t).applyMatrix4(h.projectionMatrix),f.x=d.x+e.x*g+g-8,f.y=d.y+e.y*w+w-8,m.containsPoint(f))){c.copyFramebufferToTexture(f,i),(D=o.uniforms).scale.value=p,D.screenPosition.value=e,c.renderBufferDirect(h,null,n,o,l,null),c.copyFramebufferToTexture(f,r),(D=a.uniforms).scale.value=p,D.screenPosition.value=e,c.renderBufferDirect(h,null,n,a,l,null);for(var M=2*-e.x,V=2*-e.y,P=0,B=s.length;P<B;P++){var D,F=s[P];(D=u.uniforms).color.value.copy(F.color),D.map.value=F.texture,D.screenPosition.value.x=e.x+M*F.distance,D.screenPosition.value.y=e.y+V*F.distance;b=F.size/d.w,x=d.w/d.z;D.scale.value.set(b*x,b),u.uniformsNeedUpdate=!0,c.renderBufferDirect(h,null,n,u,v,null)}}},this.dispose=function(){o.dispose(),a.dispose(),u.dispose(),i.dispose(),r.dispose();for(var e=0,t=s.length;e<t;e++)s[e].texture.dispose()}};Lensflare.prototype=Object.create(Mesh.prototype),Lensflare.prototype.constructor=Lensflare,Lensflare.prototype.isLensflare=!0;var LensflareElement=function(e,t,i,r){this.texture=e,this.size=t||1,this.distance=i||0,this.color=r||new Color(16777215)};LensflareElement.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform sampler2D occlusionMap;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tvUV = uv;","\tvec2 pos = position.xy;","\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","\tvVisibility =        visibility.r / 9.0;","\tvVisibility *= 1.0 - visibility.g / 9.0;","\tvVisibility *=       visibility.b / 9.0;","\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tvec4 texture = texture2D( map, vUV );","\ttexture.a *= vVisibility;","\tgl_FragColor = texture;","\tgl_FragColor.rgb *= color;","}"].join("\n")},Lensflare.Geometry=function(){var e=new BufferGeometry,t=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),i=new InterleavedBuffer(t,5);return e.setIndex([0,1,2,0,2,3]),e.setAttribute("position",new InterleavedBufferAttribute(i,3,0,!1)),e.setAttribute("uv",new InterleavedBufferAttribute(i,2,3,!1)),e}();export{Lensflare,LensflareElement};
//# sourceMappingURL=/sm/454c02428e2ddb28f5a5f67ede2b127874a446fb80441dfeac6807c25f183fcf.map