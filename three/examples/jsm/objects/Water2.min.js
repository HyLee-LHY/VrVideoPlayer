/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/objects/Water2.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Clock,Color,LinearEncoding,Matrix4,Mesh,RepeatWrapping,ShaderMaterial,TextureLoader,UniformsLib,UniformsUtils,Vector2,Vector4}from"../../../build/three.module.js";import{Reflector}from"../objects/Reflector.js";import{Refractor}from"../objects/Refractor.js";var Water=function(e,t){Mesh.call(this,e),this.type="Water";var r=this,o=void 0!==(t=t||{}).color?new Color(t.color):new Color(16777215),a=t.textureWidth||512,i=t.textureHeight||512,l=t.clipBias||0,n=t.flowDirection||new Vector2(1,0),f=t.flowSpeed||.03,c=t.reflectivity||.02,m=t.scale||1,v=t.shader||Water.WaterShader,u=void 0!==t.encoding?t.encoding:LinearEncoding,p=new TextureLoader,s=t.flowMap||void 0,d=t.normalMap0||p.load("textures/water/Water_1_M_Normal.jpg"),g=t.normalMap1||p.load("textures/water/Water_2_M_Normal.jpg"),x=.15,y=.5*x,h=new Matrix4,M=new Clock;if(void 0!==Reflector)if(void 0!==Refractor){var w=new Reflector(e,{textureWidth:a,textureHeight:i,clipBias:l,encoding:u}),R=new Refractor(e,{textureWidth:a,textureHeight:i,clipBias:l,encoding:u});w.matrixAutoUpdate=!1,R.matrixAutoUpdate=!1,this.material=new ShaderMaterial({uniforms:UniformsUtils.merge([UniformsLib.fog,v.uniforms]),vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,transparent:!0,fog:!0}),void 0!==s?(this.material.defines.USE_FLOWMAP="",this.material.uniforms.tFlowMap={type:"t",value:s}):this.material.uniforms.flowDirection={type:"v2",value:n},d.wrapS=d.wrapT=RepeatWrapping,g.wrapS=g.wrapT=RepeatWrapping,this.material.uniforms.tReflectionMap.value=w.getRenderTarget().texture,this.material.uniforms.tRefractionMap.value=R.getRenderTarget().texture,this.material.uniforms.tNormalMap0.value=d,this.material.uniforms.tNormalMap1.value=g,this.material.uniforms.color.value=o,this.material.uniforms.reflectivity.value=c,this.material.uniforms.textureMatrix.value=h,this.material.uniforms.config.value.x=0,this.material.uniforms.config.value.y=y,this.material.uniforms.config.value.z=y,this.material.uniforms.config.value.w=m,this.onBeforeRender=function(e,t,o){var a,i;!function(e){h.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),h.multiply(e.projectionMatrix),h.multiply(e.matrixWorldInverse),h.multiply(r.matrixWorld)}(o),a=M.getDelta(),(i=r.material.uniforms.config).value.x+=f*a,i.value.y=i.value.x+y,i.value.x>=x?(i.value.x=0,i.value.y=y):i.value.y>=x&&(i.value.y=i.value.y-x),r.visible=!1,w.matrixWorld.copy(r.matrixWorld),R.matrixWorld.copy(r.matrixWorld),w.onBeforeRender(e,t,o),R.onBeforeRender(e,t,o),r.visible=!0}}else console.error("THREE.Water: Required component Refractor not found.");else console.error("THREE.Water: Required component Reflector not found.")};Water.prototype=Object.create(Mesh.prototype),Water.prototype.constructor=Water,Water.WaterShader={uniforms:{color:{type:"c",value:null},reflectivity:{type:"f",value:0},tReflectionMap:{type:"t",value:null},tRefractionMap:{type:"t",value:null},tNormalMap0:{type:"t",value:null},tNormalMap1:{type:"t",value:null},textureMatrix:{type:"m4",value:null},config:{type:"v4",value:new Vector4}},vertexShader:["#include <common>","#include <fog_pars_vertex>","#include <logdepthbuf_pars_vertex>","uniform mat4 textureMatrix;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\tvUv = uv;","\tvCoord = textureMatrix * vec4( position, 1.0 );","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvToEye = cameraPosition - worldPosition.xyz;","\tvec4 mvPosition =  viewMatrix * worldPosition;","\tgl_Position = projectionMatrix * mvPosition;","\t#include <logdepthbuf_vertex>","\t#include <fog_vertex>","}"].join("\n"),fragmentShader:["#include <common>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","uniform sampler2D tReflectionMap;","uniform sampler2D tRefractionMap;","uniform sampler2D tNormalMap0;","uniform sampler2D tNormalMap1;","#ifdef USE_FLOWMAP","\tuniform sampler2D tFlowMap;","#else","\tuniform vec2 flowDirection;","#endif","uniform vec3 color;","uniform float reflectivity;","uniform vec4 config;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\t#include <logdepthbuf_fragment>","\tfloat flowMapOffset0 = config.x;","\tfloat flowMapOffset1 = config.y;","\tfloat halfCycle = config.z;","\tfloat scale = config.w;","\tvec3 toEye = normalize( vToEye );","\tvec2 flow;","\t#ifdef USE_FLOWMAP","\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;","\t#else","\t\tflow = flowDirection;","\t#endif","\tflow.x *= - 1.0;","\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );","\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );","\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;","\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );","\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );","\tfloat theta = max( dot( toEye, normal ), 0.0 );","\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 coord = vCoord.xyz / vCoord.w;","\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;","\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );","\tvec4 refractColor = texture2D( tRefractionMap, uv );","\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );","\t#include <tonemapping_fragment>","\t#include <encodings_fragment>","\t#include <fog_fragment>","}"].join("\n")};export{Water};
//# sourceMappingURL=/sm/cfb577275559d84dc455c4a8ee1d454cfbbcbc868764de260c1c072278d4c24e.map