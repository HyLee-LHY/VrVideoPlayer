/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/objects/Reflector.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Color,LinearEncoding,LinearFilter,MathUtils,Matrix4,Mesh,PerspectiveCamera,Plane,RGBFormat,ShaderMaterial,UniformsUtils,Vector3,Vector4,WebGLRenderTarget}from"../../../build/three.module.js";var Reflector=function(e,t){Mesh.call(this,e),this.type="Reflector";var r=this,a=void 0!==(t=t||{}).color?new Color(t.color):new Color(8355711),o=t.textureWidth||512,n=t.textureHeight||512,i=t.clipBias||0,l=t.shader||Reflector.ReflectorShader,s=void 0!==t.encoding?t.encoding:LinearEncoding,d=new Plane,c=new Vector3,m=new Vector3,u=new Vector3,v=new Matrix4,f=new Vector3(0,0,-1),p=new Vector4,x=new Vector3,b=new Vector3,M=new Vector4,h=new Matrix4,g=new PerspectiveCamera,w=new WebGLRenderTarget(o,n,{minFilter:LinearFilter,magFilter:LinearFilter,format:RGBFormat,stencilBuffer:!1,encoding:s});MathUtils.isPowerOfTwo(o)&&MathUtils.isPowerOfTwo(n)||(w.texture.generateMipmaps=!1);var y=new ShaderMaterial({uniforms:UniformsUtils.clone(l.uniforms),fragmentShader:l.fragmentShader,vertexShader:l.vertexShader});y.uniforms.tDiffuse.value=w.texture,y.uniforms.color.value=a,y.uniforms.textureMatrix.value=h,this.material=y,this.onBeforeRender=function(e,t,a){if(m.setFromMatrixPosition(r.matrixWorld),u.setFromMatrixPosition(a.matrixWorld),v.extractRotation(r.matrixWorld),c.set(0,0,1),c.applyMatrix4(v),x.subVectors(m,u),!(x.dot(c)>0)){x.reflect(c).negate(),x.add(m),v.extractRotation(a.matrixWorld),f.set(0,0,-1),f.applyMatrix4(v),f.add(u),b.subVectors(m,f),b.reflect(c).negate(),b.add(m),g.position.copy(x),g.up.set(0,1,0),g.up.applyMatrix4(v),g.up.reflect(c),g.lookAt(b),g.far=a.far,g.updateMatrixWorld(),g.projectionMatrix.copy(a.projectionMatrix),h.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),h.multiply(g.projectionMatrix),h.multiply(g.matrixWorldInverse),h.multiply(r.matrixWorld),d.setFromNormalAndCoplanarPoint(c,m),d.applyMatrix4(g.matrixWorldInverse),p.set(d.normal.x,d.normal.y,d.normal.z,d.constant);var o=g.projectionMatrix;M.x=(Math.sign(p.x)+o.elements[8])/o.elements[0],M.y=(Math.sign(p.y)+o.elements[9])/o.elements[5],M.z=-1,M.w=(1+o.elements[10])/o.elements[14],p.multiplyScalar(2/p.dot(M)),o.elements[2]=p.x,o.elements[6]=p.y,o.elements[10]=p.z+1-i,o.elements[14]=p.w,r.visible=!1;var n=e.getRenderTarget(),l=e.xr.enabled,s=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(w),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(t,g),e.xr.enabled=l,e.shadowMap.autoUpdate=s,e.setRenderTarget(n);var y=a.viewport;void 0!==y&&e.state.viewport(y),r.visible=!0}},this.getRenderTarget=function(){return w}};Reflector.prototype=Object.create(Mesh.prototype),Reflector.prototype.constructor=Reflector,Reflector.ReflectorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")};export{Reflector};
//# sourceMappingURL=/sm/937fd8ccad24a2c65812285d78b3623f340f94639b949adea1f4e22aa0a647ae.map