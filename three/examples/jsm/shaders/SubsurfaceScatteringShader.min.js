/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/jsm/shaders/SubsurfaceScatteringShader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Color,ShaderChunk,ShaderLib,UniformsUtils}from"../../../build/three.module.js";function replaceAll(e,t,i){return e.split(t).join(i)}var meshphong_frag_head=ShaderChunk.meshphong_frag.slice(0,ShaderChunk.meshphong_frag.indexOf("void main() {")),meshphong_frag_body=ShaderChunk.meshphong_frag.slice(ShaderChunk.meshphong_frag.indexOf("void main() {")),SubsurfaceScatteringShader={uniforms:UniformsUtils.merge([ShaderLib.phong.uniforms,{thicknessMap:{value:null},thicknessColor:{value:new Color(16777215)},thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}}]),vertexShader:["#define USE_UV",ShaderChunk.meshphong_vert].join("\n"),fragmentShader:["#define USE_UV","#define SUBSURFACE",meshphong_frag_head,"uniform sampler2D thicknessMap;","uniform float thicknessPower;","uniform float thicknessScale;","uniform float thicknessDistortion;","uniform float thicknessAmbient;","uniform float thicknessAttenuation;","uniform vec3 thicknessColor;","void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {","\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;","\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));","\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;","\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;","\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;","}",meshphong_frag_body.replace("#include <lights_fragment_begin>",replaceAll(ShaderChunk.lights_fragment_begin,"RE_Direct( directLight, geometry, material, reflectedLight );",["RE_Direct( directLight, geometry, material, reflectedLight );","#if defined( SUBSURFACE ) && defined( USE_UV )"," RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);","#endif"].join("\n")))].join("\n")};export{SubsurfaceScatteringShader};
//# sourceMappingURL=/sm/765745e86e139f54d9355428c7be6ccfc384b2cbd8d642befe70cc096720a4f4.map