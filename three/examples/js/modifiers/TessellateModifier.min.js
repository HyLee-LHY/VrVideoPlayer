/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/js/modifiers/TessellateModifier.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
console.warn("THREE.TessellateModifier: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."),THREE.TessellateModifier=function(e){this.maxEdgeLength=e},THREE.TessellateModifier.prototype.modify=function(e){for(var o,r=[],l=[],t=this.maxEdgeLength*this.maxEdgeLength,s=0,c=e.faceVertexUvs.length;s<c;s++)l[s]=[];for(s=0,c=e.faces.length;s<c;s++){var n=e.faces[s];if(n instanceof THREE.Face3){var a=n.a,v=n.b,i=n.c,x=e.vertices[a],p=e.vertices[v],f=e.vertices[i],m=x.distanceToSquared(p),h=p.distanceToSquared(f),d=x.distanceToSquared(f);if(m>t||h>t||d>t){var g=e.vertices.length,y=n.clone(),C=n.clone();if(m>=h&&m>=d){if((N=x.clone()).lerp(p,.5),y.a=a,y.b=g,y.c=i,C.a=g,C.b=v,C.c=i,3===n.vertexNormals.length)(u=n.vertexNormals[0].clone()).lerp(n.vertexNormals[1],.5),y.vertexNormals[1].copy(u),C.vertexNormals[0].copy(u);if(3===n.vertexColors.length)(E=n.vertexColors[0].clone()).lerp(n.vertexColors[1],.5),y.vertexColors[1].copy(E),C.vertexColors[0].copy(E);o=0}else if(h>=m&&h>=d){if((N=p.clone()).lerp(f,.5),y.a=a,y.b=v,y.c=g,C.a=g,C.b=i,C.c=a,3===n.vertexNormals.length)(u=n.vertexNormals[1].clone()).lerp(n.vertexNormals[2],.5),y.vertexNormals[2].copy(u),C.vertexNormals[0].copy(u),C.vertexNormals[1].copy(n.vertexNormals[2]),C.vertexNormals[2].copy(n.vertexNormals[0]);if(3===n.vertexColors.length)(E=n.vertexColors[1].clone()).lerp(n.vertexColors[2],.5),y.vertexColors[2].copy(E),C.vertexColors[0].copy(E),C.vertexColors[1].copy(n.vertexColors[2]),C.vertexColors[2].copy(n.vertexColors[0]);o=1}else{var N,u,E;if((N=x.clone()).lerp(f,.5),y.a=a,y.b=v,y.c=g,C.a=g,C.b=v,C.c=i,3===n.vertexNormals.length)(u=n.vertexNormals[0].clone()).lerp(n.vertexNormals[2],.5),y.vertexNormals[2].copy(u),C.vertexNormals[0].copy(u);if(3===n.vertexColors.length)(E=n.vertexColors[0].clone()).lerp(n.vertexColors[2],.5),y.vertexColors[2].copy(E),C.vertexColors[0].copy(E);o=2}r.push(y,C),e.vertices.push(N);for(var b=0,T=e.faceVertexUvs.length;b<T;b++)if(e.faceVertexUvs[b].length){var U=e.faceVertexUvs[b][s],V=U[0],M=U[1],S=U[2];if(0===o){(q=V.clone()).lerp(M,.5);var H=[V.clone(),q.clone(),S.clone()],R=[q.clone(),M.clone(),S.clone()]}else if(1===o){(q=M.clone()).lerp(S,.5);H=[V.clone(),M.clone(),q.clone()],R=[q.clone(),S.clone(),V.clone()]}else{var q;(q=V.clone()).lerp(S,.5);H=[V.clone(),M.clone(),q.clone()],R=[q.clone(),M.clone(),S.clone()]}l[b].push(H,R)}}else{r.push(n);for(b=0,T=e.faceVertexUvs.length;b<T;b++)l[b].push(e.faceVertexUvs[b][s])}}}e.faces=r,e.faceVertexUvs=l};
//# sourceMappingURL=/sm/91722054e0004ce0848b39540af6fb0b0183e7abe38f6cd015e5e9c599a69231.map