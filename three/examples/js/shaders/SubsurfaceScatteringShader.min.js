/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/js/shaders/SubsurfaceScatteringShader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function replaceAll(e,t,i){return e.split(t).join(i)}console.warn("THREE.SubsurfaceScatteringShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules.");var meshphong_frag_head=THREE.ShaderChunk.meshphong_frag.slice(0,THREE.ShaderChunk.meshphong_frag.indexOf("void main() {")),meshphong_frag_body=THREE.ShaderChunk.meshphong_frag.slice(THREE.ShaderChunk.meshphong_frag.indexOf("void main() {"));THREE.SubsurfaceScatteringShader={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.phong.uniforms,{thicknessMap:{value:null},thicknessColor:{value:new THREE.Color(16777215)},thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}}]),vertexShader:["#define USE_UV",THREE.ShaderChunk.meshphong_vert].join("\n"),fragmentShader:["#define USE_UV","#define SUBSURFACE",meshphong_frag_head,"uniform sampler2D thicknessMap;","uniform float thicknessPower;","uniform float thicknessScale;","uniform float thicknessDistortion;","uniform float thicknessAmbient;","uniform float thicknessAttenuation;","uniform vec3 thicknessColor;","void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {","\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;","\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));","\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;","\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;","\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;","}",meshphong_frag_body.replace("#include <lights_fragment_begin>",replaceAll(THREE.ShaderChunk.lights_fragment_begin,"RE_Direct( directLight, geometry, material, reflectedLight );",["RE_Direct( directLight, geometry, material, reflectedLight );","#if defined( SUBSURFACE ) && defined( USE_UV )"," RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);","#endif"].join("\n")))].join("\n")};
//# sourceMappingURL=/sm/b920df16e3702bf7864745b55b37887e0fd643734adcd78a910488ed85351302.map