/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/js/misc/RollerCoaster.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
console.warn("THREE.RollerCoaster: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."),THREE.RollerCoasterGeometry=function(e,t){THREE.BufferGeometry.call(this);var r=[],o=[],n=[],a=[1,1,1],E=[1,1,0],p=new THREE.Vector3(0,1,0),s=new THREE.Vector3,u=new THREE.Vector3,y=new THREE.Quaternion,i=new THREE.Quaternion;i.setFromAxisAngle(p,Math.PI/2);var c=new THREE.Vector3,h=new THREE.Vector3;h.copy(e.getPointAt(0));for(var l=[new THREE.Vector3(-.225,0,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(0,-.175,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(.225,0,0),new THREE.Vector3(0,-.175,0)],R=2*Math.PI,T=5,H=[],w=0;w<T;w++){var d=w/T*R;H.push(new THREE.Vector3(.06*Math.sin(d),.06*Math.cos(d),0))}T=6;var f=[];for(w=0;w<T;w++){d=w/T*R;f.push(new THREE.Vector3(.025*Math.sin(d),.025*Math.cos(d),0))}var V=new THREE.Vector3,m=new THREE.Vector3;function z(e,t){m.set(0,0,-1).applyQuaternion(y);for(var a=0;a<e.length;a++)V.copy(e[a]),V.applyQuaternion(y),V.add(c),r.push(V.x,V.y,V.z),o.push(m.x,m.y,m.z),n.push(t[0],t[1],t[2]);m.set(0,0,1).applyQuaternion(y);for(a=e.length-1;a>=0;a--)V.copy(e[a]),V.applyQuaternion(y),V.add(c),r.push(V.x,V.y,V.z),o.push(m.x,m.y,m.z),n.push(t[0],t[1],t[2])}var x=new THREE.Vector3,A=new THREE.Vector3,Q=new THREE.Vector3,M=new THREE.Vector3,v=new THREE.Vector3,b=new THREE.Vector3,g=new THREE.Vector3,G=new THREE.Vector3;function B(e,t,a){for(var E=0,p=e.length;E<p;E++){var s=e[E],u=e[(E+1)%p];x.copy(s).add(t),x.applyQuaternion(y),x.add(c),A.copy(u).add(t),A.applyQuaternion(y),A.add(c),Q.copy(u).add(t),Q.applyQuaternion(i),Q.add(h),M.copy(s).add(t),M.applyQuaternion(i),M.add(h),r.push(x.x,x.y,x.z),r.push(A.x,A.y,A.z),r.push(M.x,M.y,M.z),r.push(A.x,A.y,A.z),r.push(Q.x,Q.y,Q.z),r.push(M.x,M.y,M.z),v.copy(s),v.applyQuaternion(y),v.normalize(),b.copy(u),b.applyQuaternion(y),b.normalize(),g.copy(u),g.applyQuaternion(i),g.normalize(),G.copy(s),G.applyQuaternion(i),G.normalize(),o.push(v.x,v.y,v.z),o.push(b.x,b.y,b.z),o.push(G.x,G.y,G.z),o.push(b.x,b.y,b.z),o.push(g.x,g.y,g.z),o.push(G.x,G.y,G.z),n.push(a[0],a[1],a[2]),n.push(a[0],a[1],a[2]),n.push(a[0],a[1],a[2]),n.push(a[0],a[1],a[2]),n.push(a[0],a[1],a[2]),n.push(a[0],a[1],a[2])}}var F=new THREE.Vector3;for(w=1;w<=t;w++){c.copy(e.getPointAt(w/t)),p.set(0,1,0),s.subVectors(c,h).normalize(),u.crossVectors(p,s).normalize(),p.crossVectors(s,u);d=Math.atan2(s.x,s.z);y.setFromAxisAngle(p,d),w%2==0&&z(l,E),B(H,F.set(0,-.125,0),E),B(f,F.set(.2,0,0),a),B(f,F.set(-.2,0,0),a),h.copy(c),i.copy(y)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3)),this.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(o),3)),this.setAttribute("color",new THREE.BufferAttribute(new Float32Array(n),3))},THREE.RollerCoasterGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.RollerCoasterLiftersGeometry=function(e,t){THREE.BufferGeometry.call(this);var r=[],o=[],n=new THREE.Quaternion,a=new THREE.Vector3(0,1,0),E=new THREE.Vector3,p=new THREE.Vector3,s=[new THREE.Vector3(0,.05,-.05),new THREE.Vector3(0,.05,.05),new THREE.Vector3(0,-.05,0)],u=[new THREE.Vector3(-.05,0,.05),new THREE.Vector3(-.05,0,-.05),new THREE.Vector3(.05,0,0)],y=[new THREE.Vector3(.05,0,-.05),new THREE.Vector3(.05,0,.05),new THREE.Vector3(-.05,0,0)],i=new THREE.Vector3,c=new THREE.Vector3,h=new THREE.Vector3,l=new THREE.Vector3,R=new THREE.Vector3,T=new THREE.Vector3,H=new THREE.Vector3,w=new THREE.Vector3;function d(e,t,a){for(var E=0,p=e.length;E<p;E++){var s=e[E],u=e[(E+1)%p];i.copy(s),i.applyQuaternion(n),i.add(t),c.copy(u),c.applyQuaternion(n),c.add(t),h.copy(u),h.applyQuaternion(n),h.add(a),l.copy(s),l.applyQuaternion(n),l.add(a),r.push(i.x,i.y,i.z),r.push(c.x,c.y,c.z),r.push(l.x,l.y,l.z),r.push(c.x,c.y,c.z),r.push(h.x,h.y,h.z),r.push(l.x,l.y,l.z),R.copy(s),R.applyQuaternion(n),R.normalize(),T.copy(u),T.applyQuaternion(n),T.normalize(),H.copy(u),H.applyQuaternion(n),H.normalize(),w.copy(s),w.applyQuaternion(n),w.normalize(),o.push(R.x,R.y,R.z),o.push(T.x,T.y,T.z),o.push(w.x,w.y,w.z),o.push(T.x,T.y,T.z),o.push(H.x,H.y,H.z),o.push(w.x,w.y,w.z)}}for(var f=new THREE.Vector3,V=new THREE.Vector3,m=1;m<=t;m++){E.copy(e.getPointAt(m/t)),p.copy(e.getTangentAt(m/t));var z=Math.atan2(p.x,p.z);n.setFromAxisAngle(a,z),E.y>10?(f.set(-.75,-.35,0),f.applyQuaternion(n),f.add(E),V.set(.75,-.35,0),V.applyQuaternion(n),V.add(E),d(s,f,V),f.set(-.7,-.3,0),f.applyQuaternion(n),f.add(E),V.set(-.7,-E.y,0),V.applyQuaternion(n),V.add(E),d(u,f,V),f.set(.7,-.3,0),f.applyQuaternion(n),f.add(E),V.set(.7,-E.y,0),V.applyQuaternion(n),V.add(E),d(y,f,V)):(f.set(0,-.2,0),f.applyQuaternion(n),f.add(E),V.set(0,-E.y,0),V.applyQuaternion(n),V.add(E),d(y,f,V))}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3)),this.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(o),3))},THREE.RollerCoasterLiftersGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.RollerCoasterShadowGeometry=function(e,t){THREE.BufferGeometry.call(this);var r=[],o=new THREE.Vector3(0,1,0),n=new THREE.Vector3,a=new THREE.Quaternion,E=new THREE.Quaternion;E.setFromAxisAngle(o,Math.PI/2);var p=new THREE.Vector3,s=new THREE.Vector3;s.copy(e.getPointAt(0)),s.y=0;for(var u=new THREE.Vector3,y=new THREE.Vector3,i=new THREE.Vector3,c=new THREE.Vector3,h=1;h<=t;h++){p.copy(e.getPointAt(h/t)),p.y=0,n.subVectors(p,s);var l=Math.atan2(n.x,n.z);a.setFromAxisAngle(o,l),u.set(-.3,0,0),u.applyQuaternion(a),u.add(p),y.set(.3,0,0),y.applyQuaternion(a),y.add(p),i.set(.3,0,0),i.applyQuaternion(E),i.add(s),c.set(-.3,0,0),c.applyQuaternion(E),c.add(s),r.push(u.x,u.y,u.z),r.push(y.x,y.y,y.z),r.push(c.x,c.y,c.z),r.push(y.x,y.y,y.z),r.push(i.x,i.y,i.z),r.push(c.x,c.y,c.z),s.copy(p),E.copy(a)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3))},THREE.RollerCoasterShadowGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.SkyGeometry=function(){THREE.BufferGeometry.call(this);for(var e=[],t=0;t<100;t++){var r=800*Math.random()-400,o=50*Math.random()+50,n=800*Math.random()-400,a=40*Math.random()+20;e.push(r-a,o,n-a),e.push(r+a,o,n-a),e.push(r-a,o,n+a),e.push(r+a,o,n-a),e.push(r+a,o,n+a),e.push(r-a,o,n+a)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(e),3))},THREE.SkyGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TreesGeometry=function(e){THREE.BufferGeometry.call(this);var t=[],r=[],o=new THREE.Raycaster;o.ray.direction.set(0,-1,0);for(var n=0;n<2e3;n++){var a=500*Math.random()-250,E=500*Math.random()-250;o.ray.origin.set(a,50,E);var p=o.intersectObject(e);if(0!==p.length){var s=p[0].point.y,u=5*Math.random()+.5,y=Math.random()*Math.PI*2;t.push(a+Math.sin(y),s,E+Math.cos(y)),t.push(a,s+u,E),t.push(a+Math.sin(y+Math.PI),s,E+Math.cos(y+Math.PI)),y+=Math.PI/2,t.push(a+Math.sin(y),s,E+Math.cos(y)),t.push(a,s+u,E),t.push(a+Math.sin(y+Math.PI),s,E+Math.cos(y+Math.PI));for(var i=.1*Math.random(),c=0;c<6;c++)r.push(.2+i,.4+i,0)}}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(t),3)),this.setAttribute("color",new THREE.BufferAttribute(new Float32Array(r),3))},THREE.TreesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);
//# sourceMappingURL=/sm/a42cf552a8c1d8a86b0f2fce7769d5ef499669294afeb43ceaa83c0f6110ae45.map