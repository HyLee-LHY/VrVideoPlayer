/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/js/objects/Water.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
console.warn("THREE.Water: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."),THREE.Water=function(e,r){THREE.Mesh.call(this,e);var t=this,o=void 0!==(r=r||{}).textureWidth?r.textureWidth:512,i=void 0!==r.textureHeight?r.textureHeight:512,a=void 0!==r.clipBias?r.clipBias:0,n=void 0!==r.alpha?r.alpha:1,l=void 0!==r.time?r.time:0,s=void 0!==r.waterNormals?r.waterNormals:null,u=void 0!==r.sunDirection?r.sunDirection:new THREE.Vector3(.70707,.70707,0),c=new THREE.Color(void 0!==r.sunColor?r.sunColor:16777215),m=new THREE.Color(void 0!==r.waterColor?r.waterColor:8355711),d=void 0!==r.eye?r.eye:new THREE.Vector3(0,0,0),v=void 0!==r.distortionScale?r.distortionScale:20,f=void 0!==r.side?r.side:THREE.FrontSide,p=void 0!==r.fog&&r.fog,E=new THREE.Plane,x=new THREE.Vector3,g=new THREE.Vector3,w=new THREE.Vector3,h=new THREE.Matrix4,T=new THREE.Vector3(0,0,-1),R=new THREE.Vector4,y=new THREE.Vector3,H=new THREE.Vector3,M=new THREE.Vector4,C=new THREE.Matrix4,S=new THREE.PerspectiveCamera,_={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},b=new THREE.WebGLRenderTarget(o,i,_);THREE.MathUtils.isPowerOfTwo(o)&&THREE.MathUtils.isPowerOfTwo(i)||(b.texture.generateMipmaps=!1);var D={uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new THREE.Matrix4},sunColor:{value:new THREE.Color(8355711)},sunDirection:{value:new THREE.Vector3(.70707,.70707,0)},eye:{value:new THREE.Vector3},waterColor:{value:new THREE.Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","#include <common>","#include <fog_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;","#include <logdepthbuf_vertex>","#include <fog_vertex>","#include <shadowmap_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","#include <common>","#include <packing>","#include <bsdfs>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <lights_pars_begin>","#include <shadowmap_pars_fragment>","#include <shadowmask_pars_fragment>","void main() {","#include <logdepthbuf_fragment>","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );","#include <tonemapping_fragment>","#include <fog_fragment>","}"].join("\n")},P=new THREE.ShaderMaterial({fragmentShader:D.fragmentShader,vertexShader:D.vertexShader,uniforms:THREE.UniformsUtils.clone(D.uniforms),lights:!0,side:f,fog:p});P.uniforms.mirrorSampler.value=b.texture,P.uniforms.textureMatrix.value=C,P.uniforms.alpha.value=n,P.uniforms.time.value=l,P.uniforms.normalSampler.value=s,P.uniforms.sunColor.value=c,P.uniforms.waterColor.value=m,P.uniforms.sunDirection.value=u,P.uniforms.distortionScale.value=v,P.uniforms.eye.value=d,t.material=P,t.onBeforeRender=function(e,r,o){if(g.setFromMatrixPosition(t.matrixWorld),w.setFromMatrixPosition(o.matrixWorld),h.extractRotation(t.matrixWorld),x.set(0,0,1),x.applyMatrix4(h),y.subVectors(g,w),!(y.dot(x)>0)){y.reflect(x).negate(),y.add(g),h.extractRotation(o.matrixWorld),T.set(0,0,-1),T.applyMatrix4(h),T.add(w),H.subVectors(g,T),H.reflect(x).negate(),H.add(g),S.position.copy(y),S.up.set(0,1,0),S.up.applyMatrix4(h),S.up.reflect(x),S.lookAt(H),S.far=o.far,S.updateMatrixWorld(),S.projectionMatrix.copy(o.projectionMatrix),C.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),C.multiply(S.projectionMatrix),C.multiply(S.matrixWorldInverse),E.setFromNormalAndCoplanarPoint(x,g),E.applyMatrix4(S.matrixWorldInverse),R.set(E.normal.x,E.normal.y,E.normal.z,E.constant);var i=S.projectionMatrix;M.x=(Math.sign(R.x)+i.elements[8])/i.elements[0],M.y=(Math.sign(R.y)+i.elements[9])/i.elements[5],M.z=-1,M.w=(1+i.elements[10])/i.elements[14],R.multiplyScalar(2/R.dot(M)),i.elements[2]=R.x,i.elements[6]=R.y,i.elements[10]=R.z+1-a,i.elements[14]=R.w,d.setFromMatrixPosition(o.matrixWorld);var n=e.getRenderTarget(),l=e.xr.enabled,s=e.shadowMap.autoUpdate;t.visible=!1,e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(b),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(r,S),t.visible=!0,e.xr.enabled=l,e.shadowMap.autoUpdate=s,e.setRenderTarget(n);var u=o.viewport;void 0!==u&&e.state.viewport(u)}}},THREE.Water.prototype=Object.create(THREE.Mesh.prototype),THREE.Water.prototype.constructor=THREE.Water;
//# sourceMappingURL=/sm/b1cf90d3f23f0fc8e24eb7494116000422aa093a9d7808e636daf4f23255d1f4.map