/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/examples/js/objects/Refractor.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
console.warn("THREE.Refractor: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."),THREE.Refractor=function(e,r){THREE.Mesh.call(this,e),this.type="Refractor";var t=this,a=void 0!==(r=r||{}).color?new THREE.Color(r.color):new THREE.Color(8355711),o=r.textureWidth||512,n=r.textureHeight||512,i=r.clipBias||0,l=r.shader||THREE.Refractor.RefractorShader,s=void 0!==r.encoding?r.encoding:THREE.LinearEncoding,c=new THREE.PerspectiveCamera;c.matrixAutoUpdate=!1,c.userData.refractor=!0;var d=new THREE.Plane,E=new THREE.Matrix4,m={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1,encoding:s},u=new THREE.WebGLRenderTarget(o,n,m);THREE.MathUtils.isPowerOfTwo(o)&&THREE.MathUtils.isPowerOfTwo(n)||(u.texture.generateMipmaps=!1),this.material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,transparent:!0}),this.material.uniforms.color.value=a,this.material.uniforms.tDiffuse.value=u.texture,this.material.uniforms.textureMatrix.value=E;var v,f,R,p,x,T,b,H,h=(v=new THREE.Vector3,f=new THREE.Vector3,R=new THREE.Matrix4,p=new THREE.Vector3,x=new THREE.Vector3,function(e){return v.setFromMatrixPosition(t.matrixWorld),f.setFromMatrixPosition(e.matrixWorld),p.subVectors(v,f),R.extractRotation(t.matrixWorld),x.set(0,0,1),x.applyMatrix4(R),p.dot(x)<0}),w=function(){var e=new THREE.Vector3,r=new THREE.Vector3,a=new THREE.Quaternion,o=new THREE.Vector3;return function(){t.matrixWorld.decompose(r,a,o),e.set(0,0,1).applyQuaternion(a).normalize(),e.negate(),d.setFromNormalAndCoplanarPoint(e,r)}}(),g=(T=new THREE.Plane,b=new THREE.Vector4,H=new THREE.Vector4,function(e){c.matrixWorld.copy(e.matrixWorld),c.matrixWorldInverse.getInverse(c.matrixWorld),c.projectionMatrix.copy(e.projectionMatrix),c.far=e.far,T.copy(d),T.applyMatrix4(c.matrixWorldInverse),b.set(T.normal.x,T.normal.y,T.normal.z,T.constant);var r=c.projectionMatrix;H.x=(Math.sign(b.x)+r.elements[8])/r.elements[0],H.y=(Math.sign(b.y)+r.elements[9])/r.elements[5],H.z=-1,H.w=(1+r.elements[10])/r.elements[14],b.multiplyScalar(2/b.dot(H)),r.elements[2]=b.x,r.elements[6]=b.y,r.elements[10]=b.z+1-i,r.elements[14]=b.w});this.onBeforeRender=function(e,r,a){!0!==a.userData.refractor&&!0!=!h(a)&&(w(),function(e){E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiply(e.projectionMatrix),E.multiply(e.matrixWorldInverse),E.multiply(t.matrixWorld)}(a),g(a),function(e,r,a){t.visible=!1;var o=e.getRenderTarget(),n=e.xr.enabled,i=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(u),!1===e.autoClear&&e.clear(),e.render(r,c),e.xr.enabled=n,e.shadowMap.autoUpdate=i,e.setRenderTarget(o);var l=a.viewport;void 0!==l&&e.state.viewport(l),t.visible=!0}(e,r,a))},this.getRenderTarget=function(){return u}},THREE.Refractor.prototype=Object.create(THREE.Mesh.prototype),THREE.Refractor.prototype.constructor=THREE.Refractor,THREE.Refractor.RefractorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")};
//# sourceMappingURL=/sm/f64c7006d31ffdbe4cd2630d7e56957b475eab260a687099ddd6eb904c3c3ebf.map