/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/src/renderers/webgl/WebGLProgram.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{WebGLUniforms}from"./WebGLUniforms.js";import{WebGLShader}from"./WebGLShader.js";import{ShaderChunk}from"../shaders/ShaderChunk.js";import{NoToneMapping,AddOperation,MixOperation,MultiplyOperation,EquirectangularRefractionMapping,CubeRefractionMapping,SphericalReflectionMapping,EquirectangularReflectionMapping,CubeUVRefractionMapping,CubeUVReflectionMapping,CubeReflectionMapping,PCFSoftShadowMap,PCFShadowMap,VSMShadowMap,ACESFilmicToneMapping,CineonToneMapping,Uncharted2ToneMapping,ReinhardToneMapping,LinearToneMapping,GammaEncoding,RGBDEncoding,RGBM16Encoding,RGBM7Encoding,RGBEEncoding,sRGBEncoding,LinearEncoding,LogLuvEncoding}from"../../constants.js";var programIdCount=0;function addLineNumbers(e){for(var n=e.split("\n"),r=0;r<n.length;r++)n[r]=r+1+": "+n[r];return n.join("\n")}function getEncodingComponents(e){switch(e){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];case RGBEEncoding:return["RGBE","( value )"];case RGBM7Encoding:return["RGBM","( value, 7.0 )"];case RGBM16Encoding:return["RGBM","( value, 16.0 )"];case RGBDEncoding:return["RGBD","( value, 256.0 )"];case GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case LogLuvEncoding:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+e)}}function getShaderErrors(e,n,r){var a=e.getShaderParameter(n,e.COMPILE_STATUS),i=e.getShaderInfoLog(n).trim();return a&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+r+"\n"+i+addLineNumbers(e.getShaderSource(n))}function getTexelDecodingFunction(e,n){var r=getEncodingComponents(n);return"vec4 "+e+"( vec4 value ) { return "+r[0]+"ToLinear"+r[1]+"; }"}function getTexelEncodingFunction(e,n){var r=getEncodingComponents(n);return"vec4 "+e+"( vec4 value ) { return LinearTo"+r[0]+r[1]+"; }"}function getToneMappingFunction(e,n){var r;switch(n){case LinearToneMapping:r="Linear";break;case ReinhardToneMapping:r="Reinhard";break;case Uncharted2ToneMapping:r="Uncharted2";break;case CineonToneMapping:r="OptimizedCineon";break;case ACESFilmicToneMapping:r="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+n)}return"vec3 "+e+"( vec3 color ) { return "+r+"ToneMapping( color ); }"}function generateExtensions(e){return[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(filterEmptyLine).join("\n")}function generateDefines(e){var n=[];for(var r in e){var a=e[r];!1!==a&&n.push("#define "+r+" "+a)}return n.join("\n")}function fetchAttributeLocations(e,n){for(var r={},a=e.getProgramParameter(n,e.ACTIVE_ATTRIBUTES),i=0;i<a;i++){var t=e.getActiveAttrib(n,i).name;r[t]=e.getAttribLocation(n,t)}return r}function filterEmptyLine(e){return""!==e}function replaceLightNums(e,n){return e.replace(/NUM_DIR_LIGHTS/g,n.numDirLights).replace(/NUM_SPOT_LIGHTS/g,n.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,n.numPointLights).replace(/NUM_HEMI_LIGHTS/g,n.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,n.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,n.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,n.numPointLightShadows)}function replaceClippingPlaneNums(e,n){return e.replace(/NUM_CLIPPING_PLANES/g,n.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,n.numClippingPlanes-n.numClipIntersection)}var includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}function includeReplacer(e,n){var r=ShaderChunk[n];if(void 0===r)throw new Error("Can not resolve #include <"+n+">");return resolveIncludes(r)}var deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,unrollLoopPattern=/#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer)}function deprecatedLoopReplacer(e,n,r,a){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),loopReplacer(e,n,r,a)}function loopReplacer(e,n,r,a){for(var i="",t=parseInt(n);t<parseInt(r);t++)i+=a.replace(/\[ i \]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return i}function generatePrecision(e){var n="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?n+="\n#define HIGH_PRECISION":"mediump"===e.precision?n+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(n+="\n#define LOW_PRECISION"),n}function generateShadowMapTypeDefine(e){var n="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===PCFShadowMap?n="SHADOWMAP_TYPE_PCF":e.shadowMapType===PCFSoftShadowMap?n="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===VSMShadowMap&&(n="SHADOWMAP_TYPE_VSM"),n}function generateEnvMapTypeDefine(e){var n="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:n="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:n="ENVMAP_TYPE_CUBE_UV";break;case EquirectangularReflectionMapping:case EquirectangularRefractionMapping:n="ENVMAP_TYPE_EQUIREC";break;case SphericalReflectionMapping:n="ENVMAP_TYPE_SPHERE"}return n}function generateEnvMapModeDefine(e){var n="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case CubeRefractionMapping:case EquirectangularRefractionMapping:n="ENVMAP_MODE_REFRACTION"}return n}function generateEnvMapBlendingDefine(e){var n="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case MultiplyOperation:n="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:n="ENVMAP_BLENDING_MIX";break;case AddOperation:n="ENVMAP_BLENDING_ADD"}return n}function WebGLProgram(e,n,r){var a,i,t=e.getContext(),o=r.defines,p=r.vertexShader,d=r.fragmentShader,c=generateShadowMapTypeDefine(r),E=generateEnvMapTypeDefine(r),g=generateEnvMapModeDefine(r),u=generateEnvMapBlendingDefine(r),f=e.gammaFactor>0?e.gammaFactor:1,l=r.isWebGL2?"":generateExtensions(r),s=generateDefines(o),M=t.createProgram();if(r.isRawShaderMaterial?((a=[s].filter(filterEmptyLine).join("\n")).length>0&&(a+="\n"),(i=[l,s].filter(filterEmptyLine).join("\n")).length>0&&(i+="\n")):(a=[generatePrecision(r),"#define SHADER_NAME "+r.shaderName,s,r.instancing?"#define USE_INSTANCING":"",r.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+f,"#define MAX_BONES "+r.maxBones,r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+g:"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMap&&r.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",r.normalMap&&r.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",r.clearcoatMap?"#define USE_CLEARCOATMAP":"",r.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.displacementMap&&r.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.vertexTangents?"#define USE_TANGENT":"",r.vertexColors?"#define USE_COLOR":"",r.vertexUvs?"#define USE_UV":"",r.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",r.flatShading?"#define FLAT_SHADED":"",r.skinning?"#define USE_SKINNING":"",r.useVertexTexture?"#define BONE_TEXTURE":"",r.morphTargets?"#define USE_MORPHTARGETS":"",r.morphNormals&&!1===r.flatShading?"#define USE_MORPHNORMALS":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+c:"",r.sizeAttenuation?"#define USE_SIZEATTENUATION":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",r.logarithmicDepthBuffer&&r.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),i=[l,generatePrecision(r),"#define SHADER_NAME "+r.shaderName,s,r.alphaTest?"#define ALPHATEST "+r.alphaTest+(r.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+f,r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.matcap?"#define USE_MATCAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+E:"",r.envMap?"#define "+g:"",r.envMap?"#define "+u:"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMap&&r.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",r.normalMap&&r.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",r.clearcoatMap?"#define USE_CLEARCOATMAP":"",r.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.sheen?"#define USE_SHEEN":"",r.vertexTangents?"#define USE_TANGENT":"",r.vertexColors?"#define USE_COLOR":"",r.vertexUvs?"#define USE_UV":"",r.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",r.gradientMap?"#define USE_GRADIENTMAP":"",r.flatShading?"#define FLAT_SHADED":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+c:"",r.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",r.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",r.logarithmicDepthBuffer&&r.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(r.extensionShaderTextureLOD||r.envMap)&&r.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",r.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",r.toneMapping!==NoToneMapping?ShaderChunk.tonemapping_pars_fragment:"",r.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",r.toneMapping):"",r.dithering?"#define DITHERING":"",r.outputEncoding||r.mapEncoding||r.matcapEncoding||r.envMapEncoding||r.emissiveMapEncoding||r.lightMapEncoding?ShaderChunk.encodings_pars_fragment:"",r.mapEncoding?getTexelDecodingFunction("mapTexelToLinear",r.mapEncoding):"",r.matcapEncoding?getTexelDecodingFunction("matcapTexelToLinear",r.matcapEncoding):"",r.envMapEncoding?getTexelDecodingFunction("envMapTexelToLinear",r.envMapEncoding):"",r.emissiveMapEncoding?getTexelDecodingFunction("emissiveMapTexelToLinear",r.emissiveMapEncoding):"",r.lightMapEncoding?getTexelDecodingFunction("lightMapTexelToLinear",r.lightMapEncoding):"",r.outputEncoding?getTexelEncodingFunction("linearToOutputTexel",r.outputEncoding):"",r.depthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")),p=replaceClippingPlaneNums(p=replaceLightNums(p=resolveIncludes(p),r),r),d=replaceClippingPlaneNums(d=replaceLightNums(d=resolveIncludes(d),r),r),p=unrollLoops(p),d=unrollLoops(d),r.isWebGL2&&!r.isRawShaderMaterial){var S=!1,m=/^\s*#version\s+300\s+es\s*\n/;r.isShaderMaterial&&null!==p.match(m)&&null!==d.match(m)&&(S=!0,p=p.replace(m,""),d=d.replace(m,"")),a=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+a,i=["#version 300 es\n","#define varying in",S?"":"out highp vec4 pc_fragColor;",S?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+i}var _,h,T=a+p,A=i+d,L=WebGLShader(t,t.VERTEX_SHADER,T),P=WebGLShader(t,t.FRAGMENT_SHADER,A);if(t.attachShader(M,L),t.attachShader(M,P),void 0!==r.index0AttributeName?t.bindAttribLocation(M,0,r.index0AttributeName):!0===r.morphTargets&&t.bindAttribLocation(M,0,"position"),t.linkProgram(M),e.debug.checkShaderErrors){var v=t.getProgramInfoLog(M).trim(),N=t.getShaderInfoLog(L).trim(),U=t.getShaderInfoLog(P).trim(),R=!0,C=!0;if(!1===t.getProgramParameter(M,t.LINK_STATUS)){R=!1;var O=getShaderErrors(t,L,"vertex"),D=getShaderErrors(t,P,"fragment");console.error("THREE.WebGLProgram: shader error: ",t.getError(),"gl.VALIDATE_STATUS",t.getProgramParameter(M,t.VALIDATE_STATUS),"gl.getProgramInfoLog",v,O,D)}else""!==v?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",v):""!==N&&""!==U||(C=!1);C&&(this.diagnostics={runnable:R,programLog:v,vertexShader:{log:N,prefix:a},fragmentShader:{log:U,prefix:i}})}return t.deleteShader(L),t.deleteShader(P),this.getUniforms=function(){return void 0===_&&(_=new WebGLUniforms(t,M)),_},this.getAttributes=function(){return void 0===h&&(h=fetchAttributeLocations(t,M)),h},this.destroy=function(){t.deleteProgram(M),this.program=void 0},this.name=r.shaderName,this.id=programIdCount++,this.cacheKey=n,this.usedTimes=1,this.program=M,this.vertexShader=L,this.fragmentShader=P,this}export{WebGLProgram};
//# sourceMappingURL=/sm/a8a93b58c4acccdce9f985ddcc2f50055d9cf5d5b9bf89f951d5453705d5696d.map