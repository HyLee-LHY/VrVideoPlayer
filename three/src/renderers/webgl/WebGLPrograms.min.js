/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/src/renderers/webgl/WebGLPrograms.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{BackSide,DoubleSide,CubeUVRefractionMapping,CubeUVReflectionMapping,LinearEncoding,ObjectSpaceNormalMap,TangentSpaceNormalMap,NoToneMapping}from"../../constants.js";import{WebGLProgram}from"./WebGLProgram.js";import{ShaderLib}from"../shaders/ShaderLib.js";import{UniformsUtils}from"../shaders/UniformsUtils.js";function WebGLPrograms(e,a,n){var r=[],t=n.isWebGL2,i=n.logarithmicDepthBuffer,s=n.floatVertexTextures,o=n.precision,p=n.maxVertexUniforms,h=n.vertexTextures,l={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},m=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function g(e){var a;return e?e.isTexture?a=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),a=e.texture.encoding):a=LinearEncoding,a}this.getParameters=function(r,m,d,M,c,u,f){var x=M.fog,S=r.isMeshStandardMaterial?M.environment:null,v=r.envMap||S,b=l[r.type],L=f.isSkinnedMesh?function(e){var a=e.skeleton.bones;if(s)return 1024;var n=p,r=Math.floor((n-20)/4),t=Math.min(r,a.length);return t<a.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+a.length+" bones. This GPU supports "+t+"."),0):t}(f):0;null!==r.precision&&(o=n.getMaxPrecision(r.precision))!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",o,"instead.");var T=function(e,a){var n;if(a){var r=ShaderLib[a];n={name:e.type,uniforms:UniformsUtils.clone(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}}else n={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};return n}(r,b);r.onBeforeCompile(T,e);var E=e.getRenderTarget();return{isWebGL2:t,shaderID:b,shaderName:T.name,uniforms:T.uniforms,vertexShader:T.vertexShader,fragmentShader:T.fragmentShader,defines:r.defines,isRawShaderMaterial:r.isRawShaderMaterial,isShaderMaterial:r.isShaderMaterial,precision:o,instancing:!0===f.isInstancedMesh,supportsVertexTextures:h,outputEncoding:null!==E?g(E.texture):e.outputEncoding,map:!!r.map,mapEncoding:g(r.map),matcap:!!r.matcap,matcapEncoding:g(r.matcap),envMap:!!v,envMapMode:v&&v.mapping,envMapEncoding:g(v),envMapCubeUV:!!v&&(v.mapping===CubeUVReflectionMapping||v.mapping===CubeUVRefractionMapping),lightMap:!!r.lightMap,lightMapEncoding:g(r.lightMap),aoMap:!!r.aoMap,emissiveMap:!!r.emissiveMap,emissiveMapEncoding:g(r.emissiveMap),bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,objectSpaceNormalMap:r.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:r.normalMapType===TangentSpaceNormalMap,clearcoatMap:!!r.clearcoatMap,clearcoatRoughnessMap:!!r.clearcoatRoughnessMap,clearcoatNormalMap:!!r.clearcoatNormalMap,displacementMap:!!r.displacementMap,roughnessMap:!!r.roughnessMap,metalnessMap:!!r.metalnessMap,specularMap:!!r.specularMap,alphaMap:!!r.alphaMap,gradientMap:!!r.gradientMap,sheen:!!r.sheen,combine:r.combine,vertexTangents:r.normalMap&&r.vertexTangents,vertexColors:r.vertexColors,vertexUvs:!!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatMap||r.clearcoatRoughnessMap||r.clearcoatNormalMap||r.displacementMap),uvsVertexOnly:!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatNormalMap||!r.displacementMap),fog:!!x,useFog:r.fog,fogExp2:x&&x.isFogExp2,flatShading:r.flatShading,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:i,skinning:r.skinning&&L>0,maxBones:L,useVertexTexture:s,morphTargets:r.morphTargets,morphNormals:r.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:m.directional.length,numPointLights:m.point.length,numSpotLights:m.spot.length,numRectAreaLights:m.rectArea.length,numHemiLights:m.hemi.length,numDirLightShadows:m.directionalShadowMap.length,numPointLightShadows:m.pointShadowMap.length,numSpotLightShadows:m.spotShadowMap.length,numClippingPlanes:c,numClipIntersection:u,dithering:r.dithering,shadowMapEnabled:e.shadowMap.enabled&&d.length>0,shadowMapType:e.shadowMap.type,toneMapping:r.toneMapped?e.toneMapping:NoToneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:r.premultipliedAlpha,alphaTest:r.alphaTest,doubleSided:r.side===DoubleSide,flipSided:r.side===BackSide,depthPacking:void 0!==r.depthPacking&&r.depthPacking,index0AttributeName:r.index0AttributeName,extensionDerivatives:r.extensions&&r.extensions.derivatives,extensionFragDepth:r.extensions&&r.extensions.fragDepth,extensionDrawBuffers:r.extensions&&r.extensions.drawBuffers,extensionShaderTextureLOD:r.extensions&&r.extensions.shaderTextureLOD,rendererExtensionFragDepth:t||null!==a.get("EXT_frag_depth"),rendererExtensionDrawBuffers:t||null!==a.get("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:t||null!==a.get("EXT_shader_texture_lod"),onBeforeCompile:r.onBeforeCompile}},this.getProgramCacheKey=function(a){var n=[];if(a.shaderID?n.push(a.shaderID):(n.push(a.fragmentShader),n.push(a.vertexShader)),void 0!==a.defines)for(var r in a.defines)n.push(r),n.push(a.defines[r]);if(void 0===a.isRawShaderMaterial){for(var t=0;t<m.length;t++)n.push(a[m[t]]);n.push(e.outputEncoding),n.push(e.gammaFactor)}return n.push(a.onBeforeCompile.toString()),n.join()},this.acquireProgram=function(a,n){for(var t,i=0,s=r.length;i<s;i++){var o=r[i];if(o.cacheKey===n){++(t=o).usedTimes;break}}return void 0===t&&(t=new WebGLProgram(e,n,a),r.push(t)),t},this.releaseProgram=function(e){if(0==--e.usedTimes){var a=r.indexOf(e);r[a]=r[r.length-1],r.pop(),e.destroy()}},this.programs=r}export{WebGLPrograms};
//# sourceMappingURL=/sm/3bc48a1fc1b49d6f1b8072c5dcaa3816fd10436aac695c2e0e4e8f2148c64824.map