/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/src/math/Plane.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Matrix3}from"./Matrix3.js";import{Vector3}from"./Vector3.js";var _vector1=new Vector3,_vector2=new Vector3,_normalMatrix=new Matrix3;function Plane(t,n){this.normal=void 0!==t?t:new Vector3(1,0,0),this.constant=void 0!==n?n:0}Object.assign(Plane.prototype,{isPlane:!0,set:function(t,n){return this.normal.copy(t),this.constant=n,this},setComponents:function(t,n,o,r){return this.normal.set(t,n,o),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,n){return this.normal.copy(t),this.constant=-n.dot(this.normal),this},setFromCoplanarPoints:function(t,n,o){var r=_vector1.subVectors(o,n).cross(_vector2.subVectors(t,n)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,n){return void 0===n&&(console.warn("THREE.Plane: .projectPoint() target is now required"),n=new Vector3),n.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(t,n){void 0===n&&(console.warn("THREE.Plane: .intersectLine() target is now required"),n=new Vector3);var o=t.delta(_vector1),r=this.normal.dot(o);if(0===r)return 0===this.distanceToPoint(t.start)?n.copy(t.start):void 0;var i=-(t.start.dot(this.normal)+this.constant)/r;return i<0||i>1?void 0:n.copy(o).multiplyScalar(i).add(t.start)},intersectsLine:function(t){var n=this.distanceToPoint(t.start),o=this.distanceToPoint(t.end);return n<0&&o>0||o<0&&n>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Vector3),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(t,n){var o=n||_normalMatrix.getNormalMatrix(t),r=this.coplanarPoint(_vector1).applyMatrix4(t),i=this.normal.applyMatrix3(o).normalize();return this.constant=-r.dot(i),this},translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}});export{Plane};
//# sourceMappingURL=/sm/5d164d99c11e01e31cdda6fdc87f6ba21656b65cb2359243aec324ed885e7e3a.map