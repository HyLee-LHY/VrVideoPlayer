/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/src/math/Ray.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Vector3}from"./Vector3.js";var _vector=new Vector3,_segCenter=new Vector3,_segDir=new Vector3,_diff=new Vector3,_edge1=new Vector3,_edge2=new Vector3,_normal=new Vector3;function Ray(t,i){this.origin=void 0!==t?t:new Vector3,this.direction=void 0!==i?i:new Vector3(0,0,-1)}Object.assign(Ray.prototype,{set:function(t,i){return this.origin.copy(t),this.direction.copy(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,i){return void 0===i&&(console.warn("THREE.Ray: .at() target is now required"),i=new Vector3),i.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(t){return this.origin.copy(this.at(t,_vector)),this},closestPointToPoint:function(t,i){void 0===i&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),i=new Vector3),i.subVectors(t,this.origin);var n=i.dot(this.direction);return n<0?i.copy(this.origin):i.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(t){var i=_vector.subVectors(t,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(t):(_vector.copy(this.direction).multiplyScalar(i).add(this.origin),_vector.distanceToSquared(t))},distanceSqToSegment:function(t,i,n,r){_segCenter.copy(t).add(i).multiplyScalar(.5),_segDir.copy(i).sub(t).normalize(),_diff.copy(this.origin).sub(_segCenter);var e,o,s,c,a=.5*t.distanceTo(i),d=-this.direction.dot(_segDir),u=_diff.dot(this.direction),l=-_diff.dot(_segDir),h=_diff.lengthSq(),f=Math.abs(1-d*d);if(f>0)if(o=d*u-l,c=a*f,(e=d*l-u)>=0)if(o>=-c)if(o<=c){var g=1/f;s=(e*=g)*(e+d*(o*=g)+2*u)+o*(d*e+o+2*l)+h}else o=a,s=-(e=Math.max(0,-(d*o+u)))*e+o*(o+2*l)+h;else o=-a,s=-(e=Math.max(0,-(d*o+u)))*e+o*(o+2*l)+h;else o<=-c?s=-(e=Math.max(0,-(-d*a+u)))*e+(o=e>0?-a:Math.min(Math.max(-a,-l),a))*(o+2*l)+h:o<=c?(e=0,s=(o=Math.min(Math.max(-a,-l),a))*(o+2*l)+h):s=-(e=Math.max(0,-(d*a+u)))*e+(o=e>0?a:Math.min(Math.max(-a,-l),a))*(o+2*l)+h;else o=d>0?-a:a,s=-(e=Math.max(0,-(d*o+u)))*e+o*(o+2*l)+h;return n&&n.copy(this.direction).multiplyScalar(e).add(this.origin),r&&r.copy(_segDir).multiplyScalar(o).add(_segCenter),s},intersectSphere:function(t,i){_vector.subVectors(t.center,this.origin);var n=_vector.dot(this.direction),r=_vector.dot(_vector)-n*n,e=t.radius*t.radius;if(r>e)return null;var o=Math.sqrt(e-r),s=n-o,c=n+o;return s<0&&c<0?null:s<0?this.at(c,i):this.at(s,i)},intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var i=t.normal.dot(this.direction);if(0===i)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/i;return n>=0?n:null},intersectPlane:function(t,i){var n=this.distanceToPlane(t);return null===n?null:this.at(n,i)},intersectsPlane:function(t){var i=t.distanceToPoint(this.origin);return 0===i||t.normal.dot(this.direction)*i<0},intersectBox:function(t,i){var n,r,e,o,s,c,a=1/this.direction.x,d=1/this.direction.y,u=1/this.direction.z,l=this.origin;return a>=0?(n=(t.min.x-l.x)*a,r=(t.max.x-l.x)*a):(n=(t.max.x-l.x)*a,r=(t.min.x-l.x)*a),d>=0?(e=(t.min.y-l.y)*d,o=(t.max.y-l.y)*d):(e=(t.max.y-l.y)*d,o=(t.min.y-l.y)*d),n>o||e>r?null:((e>n||n!=n)&&(n=e),(o<r||r!=r)&&(r=o),u>=0?(s=(t.min.z-l.z)*u,c=(t.max.z-l.z)*u):(s=(t.max.z-l.z)*u,c=(t.min.z-l.z)*u),n>c||s>r?null:((s>n||n!=n)&&(n=s),(c<r||r!=r)&&(r=c),r<0?null:this.at(n>=0?n:r,i)))},intersectsBox:function(t){return null!==this.intersectBox(t,_vector)},intersectTriangle:function(t,i,n,r,e){_edge1.subVectors(i,t),_edge2.subVectors(n,t),_normal.crossVectors(_edge1,_edge2);var o,s=this.direction.dot(_normal);if(s>0){if(r)return null;o=1}else{if(!(s<0))return null;o=-1,s=-s}_diff.subVectors(this.origin,t);var c=o*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(c<0)return null;var a=o*this.direction.dot(_edge1.cross(_diff));if(a<0)return null;if(c+a>s)return null;var d=-o*_diff.dot(_normal);return d<0?null:this.at(d/s,e)},applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}});export{Ray};
//# sourceMappingURL=/sm/7f7f50768df6f71fd50942af3aed4eb7847e94bcee862aecfe92d6228bad6d88.map