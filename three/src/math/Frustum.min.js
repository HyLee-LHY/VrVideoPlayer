/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/three@0.117.1/src/math/Frustum.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Vector3}from"./Vector3.js";import{Sphere}from"./Sphere.js";import{Plane}from"./Plane.js";var _sphere=new Sphere,_vector=new Vector3;function Frustum(e,n,r,t,o,i){this.planes=[void 0!==e?e:new Plane,void 0!==n?n:new Plane,void 0!==r?r:new Plane,void 0!==t?t:new Plane,void 0!==o?o:new Plane,void 0!==i?i:new Plane]}Object.assign(Frustum.prototype,{set:function(e,n,r,t,o,i){var s=this.planes;return s[0].copy(e),s[1].copy(n),s[2].copy(r),s[3].copy(t),s[4].copy(o),s[5].copy(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var n=this.planes,r=0;r<6;r++)n[r].copy(e.planes[r]);return this},setFromProjectionMatrix:function(e){var n=this.planes,r=e.elements,t=r[0],o=r[1],i=r[2],s=r[3],p=r[4],a=r[5],c=r[6],m=r[7],u=r[8],l=r[9],h=r[10],f=r[11],v=r[12],y=r[13],d=r[14],x=r[15];return n[0].setComponents(s-t,m-p,f-u,x-v).normalize(),n[1].setComponents(s+t,m+p,f+u,x+v).normalize(),n[2].setComponents(s+o,m+a,f+l,x+y).normalize(),n[3].setComponents(s-o,m-a,f-l,x-y).normalize(),n[4].setComponents(s-i,m-c,f-h,x-d).normalize(),n[5].setComponents(s+i,m+c,f+h,x+d).normalize(),this},intersectsObject:function(e){var n=e.geometry;return null===n.boundingSphere&&n.computeBoundingSphere(),_sphere.copy(n.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(_sphere)},intersectsSprite:function(e){return _sphere.center.set(0,0,0),_sphere.radius=.7071067811865476,_sphere.applyMatrix4(e.matrixWorld),this.intersectsSphere(_sphere)},intersectsSphere:function(e){for(var n=this.planes,r=e.center,t=-e.radius,o=0;o<6;o++){if(n[o].distanceToPoint(r)<t)return!1}return!0},intersectsBox:function(e){for(var n=this.planes,r=0;r<6;r++){var t=n[r];if(_vector.x=t.normal.x>0?e.max.x:e.min.x,_vector.y=t.normal.y>0?e.max.y:e.min.y,_vector.z=t.normal.z>0?e.max.z:e.min.z,t.distanceToPoint(_vector)<0)return!1}return!0},containsPoint:function(e){for(var n=this.planes,r=0;r<6;r++)if(n[r].distanceToPoint(e)<0)return!1;return!0}});export{Frustum};
//# sourceMappingURL=/sm/906582cafd147b3b250e56481e86375df8f929e887f1352a8b452cf767a135f3.map